name: Create Docker image, provision infra and deploy
on:
  push:
    branches: ['main', 'chore/init-infra']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the
      # Container registry using the account and password that will
      # publish the packages. Once published, the packages are scoped to the
      # account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses
      # [docker/metadata-action](https://github.com/docker/metadata-action#about)
      # to extract tags and labels that will be applied to the specified image.
      # The `id` "meta" allows the output of this step to be referenced in a
      # subsequent step. The `images` value provides the base name for the tags
      # and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
      # This step uses the `docker/build-push-action` action to build the image,
      # based on repository's `Dockerfile`. If the build succeeds, it
      # pushes the image to GitHub Packages. It uses the `context` parameter
      # to define the build's context as the set of files located in the
      # specified path. It uses the `tags` and `labels` parameters to tag and
      # label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 22
      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.6
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: pnpm i
      - name: Provision infra and deploy
        uses: pulumi/actions@v3
        with:
          command: up
          stack-name: extensionengine/tailor-cms/dev
          work-dir: infrastructure
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          TAILOR_DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
